<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "{{%pic}}".
 *
 * @property integer $id
 * @property integer $user_id
 * @property string $path
 */
class Pic extends \yii\db\ActiveRecord
{
    //类型
    const ITEM_DEFAULT='用户图片';
    const ITEM_PRIVATE='私有图片';
    const ITEM_USER_TX='用户头像';
    const ITEM_USER_IMG='用户图片';
    const ITEM_COMMOM_IMG='公共图片';
    const ITEM_BACKUPS_IMG='备份图片';

    //场景
    const SCENARIO_USER_CREATE='0';//前台用户新增
    const SCENARIO_USER_UPDATE='1';//前台用户更新
    const SCENARIO_ADMIN_CREATE='2';//后台管理员新增
    const SCENARIO_ADMIN_UPDATE='3';//后台管理员更新

    const PRIVATE_PWD='yiui';//私有文件查看密码加密随机码

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%pic}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['path'], 'required'],
            ['user_id', 'integer'],
            [['path'], 'string', 'max' => 255],
            ['user_id', 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('common', 'ID'),
            'user_id' => Yii::t('common', 'User ID'),
            'path' => Yii::t('common', 'Path'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public  function beforeSave($insert)
    {
        if ($insert){
            $this->user_id=Yii::$app->user->id;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * 删除数据库内容和实际文件
     * @return bool
     */
    public function delete(){
        if (parent::delete()){
            $filename=Config::STATIC_DIR_PATH.str_replace('/', DIRECTORY_SEPARATOR,$this->path);
            if (is_file($filename)){
                return unlink($filename);
            }
        }

        return false;
    }

    /**
     * 通过路径或者ID删除
     * @param $pathorid
     */
    public function deletePathOrId($pathorid){
        if (is_numeric($pathorid)){
            self::findOne($pathorid)->delete();
        } else if (strpos($pathorid,',')){
            $file=self::find()->select('id')->where(['in','id',$pathorid])->all();
            foreach ($file as $f) {
                $f->delete();
            }
        }else{
            if (is_file(Config::STATIC_DIR_PATH.str_replace('/', DIRECTORY_SEPARATOR,$pathorid))){
                unlink(Config::STATIC_DIR_PATH.str_replace('/', DIRECTORY_SEPARATOR,$pathorid));
            }
        }
    }

    public function afterSave($insert, $changedAttributes){
		parent::afterSave($insert, $changedAttributes);
		
        //删除之前的图片(保存之前只有通过 变化的属性获得之前的值)
        if (isset($changedAttributes['path']) and !empty($changedAttributes['path'])){
            $filename=Config::STATIC_DIR_PATH.str_replace('/', DIRECTORY_SEPARATOR,$changedAttributes['path']);
            if (is_file($filename)){
                unlink($filename);
            }
        }
    }

    /**
     * 在插入或更新时发生错误或异常之后，请执行此操作
     * 特别是在上传图片成功之后，但却保存失败的时候，需要删除新的图片
     * Created by www.yiui.top.
     * User: Zhao Wenming
     */
    public function afterError(){
        //保存失败，删除刚上传的图片，如果刚刚上传了图片，新图片跟旧图不相等
        if (!empty($this->path) and ((isset($this->oldAttributes['path']) and $this->path!=$this->oldAttributes['path']) or !isset($this->oldAttributes['path']))){
            $filename=Config::STATIC_DIR_PATH.str_replace('/', DIRECTORY_SEPARATOR,$this->path);
            if (is_file($filename)){
                unlink($filename);
            }
        }
    }

    /* 他人获取隐身数据，请通过pic控制器来获取 */
    /**
     * Created by www.yiui.top.
     * User: Zhao Wenming
     * @param $pid 目标图片ID
     * @param $time 超时时间
     * @return null|string 返回token
     */
    public static function getToken($pid,$time=3600){
        if (!is_numeric($pid) or !is_numeric($time) or $pid<=0 or $time<=0){
            return null;
        }

        if ($pic=self::findOne($pid)){
            return \common\helpers\Base64::encode(Yii::$app->security->encryptByKey(json_encode(['t'=>time()+$time,'path'=>$pic->path]),self::PRIVATE_PWD));
        }
        return null;
    }
}